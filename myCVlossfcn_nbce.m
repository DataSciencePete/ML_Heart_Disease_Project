function loss = myCVlossfcn_nbce(params,In,Out,cvp)

%     % Specify categorical features - these features by default will then be
%     % assigned as having a multivariate multinomial distribution 
%     categorical_fields = [false,true,true,false,false,true,true,false,true,...
%     false,true,true,true];      

    function cross_ent = ce_funct(XTRAIN,YTRAIN,XTEST,YTEST)
        
          if strcmp(char(params.dist), 'kernel')
%         if strcmp(char(params.f1), 'kernel') || strcmp(char(params.f2),'kernel') || strcmp(char(params.f3), 'kernel') || strcmp(char(params.f4), 'kernel') || strcmp(char(params.f5), 'kernel')
            [label, posterior, cost] = predict(...
                                        fitcnb(XTRAIN,YTRAIN,...
                                        'DistributionNames', {char(params.dist), 'mvmn', 'mvmn', char(params.dist), char(params.dist), 'mvmn',...
                                        'mvmn', char(params.dist), 'mvmn', char(params.dist), 'mvmn', 'mvmn', 'mvmn'}, 'Width', [params.widthparam]),...
                                        XTEST...
                                        );
%                                         'DistributionNames', {char(params.f1), 'mvmn', 'mvmn', char(params.f2), char(params.f3), 'mvmn',...
%                                         'mvmn', char(params.f4), 'mvmn', char(params.f5), 'mvmn', 'mvmn', 'mvmn'}, 'Width', [params.widthparam]),...
%                                         XTEST...
%                                         );
        else
            [label, posterior, cost] = predict(...
                                        fitcnb(XTRAIN,YTRAIN,...
                                        'DistributionNames', {char(params.dist), 'mvmn', 'mvmn', char(params.dist), char(params.dist), 'mvmn',...
                                        'mvmn', char(params.dist), 'mvmn', char(params.dist), 'mvmn', 'mvmn', 'mvmn'}),...
                                        XTEST...
                                        );
        
%                                         fitcnb(XTRAIN,YTRAIN,...
%                                         'DistributionNames', {char(params.f1), 'mvmn', 'mvmn', char(params.f2), char(params.f3), 'mvmn',...
%                                         'mvmn', char(params.f4), 'mvmn', char(params.f5), 'mvmn', 'mvmn', 'mvmn'}),...
%                                         XTEST...
%                                         );
        end 
                                    
                                    
         % Calculate CE for each k-fold partition
         kfold_ce = [];
         for row = 1:size(YTEST,1) 
             size(YTEST,1)
             YTEST(row)
             posterior(:,(YTEST(row) + 1))
             posterior(row,(YTEST(row) + 1))
             ce = log(posterior(row,(YTEST(row) + 1)));
             % Generate a vector of ce values for each k-fold
             kfold_ce = [kfold_ce ce];
%              cross_ent =  size(prob(1,:,:));
         end 
         % Calculate average ce for each k-fold test set
         cross_ent = -sum(kfold_ce);
             
    end

% Acquire the matrix of probabilities for each k-fold test
av_k_fold_ce = crossval(@ce_funct,In,Out,'partition',cvp);
loss = mean(av_k_fold_ce);
end